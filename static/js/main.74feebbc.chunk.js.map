{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","mode","set_mode","useEffect","my_canvas","document","getElementById","text_container","text_area","cur_canv_width","style","width","display","setAttribute","innerHTML","height","getBoundingClientRect","pointerEvents","documentElement","clientHeight","window","resize_paper","clientWidth","scrollTo","borderBottom","clear_canvas","interval","setInterval","paperscript_ready","clearInterval","className","id","onClick","viewBox","fill","xmlns","fillRule","d","lang","contentEditable","data-text","spellCheck","resize","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74feebbc.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport \"./App.css\";\n\n\nexport default function App() {\n\n  var [mode, set_mode] = useState(\"loading\");\n\n\n  useEffect(() => {\n    var my_canvas = document.getElementById(\"myCanvas\");\n    var text_container = document.getElementById(\"text_container\");\n    var text_area = document.getElementById(\"text_area\"); \n    var cur_canv_width = my_canvas.style.width;\n    switch (mode) {\n      case \"init\":\n        var loading_screen = document.getElementById(\"loading_screen\");\n        loading_screen.style.display = \"none\";\n        text_area.setAttribute(\"data-text\", \"\");\n        text_area.innerHTML = \"Welcome to Quick Annotate! This is a sample text, draw and annotate around me. Press the button above to edit me!\"\n        text_container.style.height = text_container.getBoundingClientRect().height + \"px\";\n        text_container.style.width = text_container.getBoundingClientRect().width + \"px\";\n        my_canvas.style.width = cur_canv_width;\n        my_canvas.style.pointerEvents = \"auto\";\n        text_container.style.pointerEvents = \"none\";\n        \n        if (document.documentElement.clientHeight > text_container.getBoundingClientRect().height) {\n          my_canvas.style.height = document.documentElement.clientHeight + \"px\";\n          window.resize_paper(document.documentElement.clientWidth, document.documentElement.clientHeight);\n        }\n        if (text_container.getBoundingClientRect().height > document.documentElement.clientHeight) {\n          window.scrollTo(0, 0);\n          my_canvas.style.height = (text_container.getBoundingClientRect().height + 140) + \"px\";\n          window.resize_paper(document.documentElement.clientWidth, (text_container.getBoundingClientRect().height + 140));\n        }\n        break;\n      case \"draw\":\n        text_area.setAttribute(\"data-text\", \"\");\n        text_container.style.height = text_container.getBoundingClientRect().height + \"px\";\n        text_container.style.width = text_container.getBoundingClientRect().width + \"px\";\n        my_canvas.style.width = cur_canv_width;\n        my_canvas.style.pointerEvents = \"auto\";\n        text_container.style.pointerEvents = \"none\";\n        text_area.style.borderBottom = \"\";\n        my_canvas.style.borderBottom = \"1px dotted white  \";\n        \n        if (document.documentElement.clientHeight > text_container.getBoundingClientRect().height) {\n          my_canvas.style.height = document.documentElement.clientHeight + \"px\";\n          window.resize_paper(document.documentElement.clientWidth, document.documentElement.clientHeight);\n        }\n        if (text_container.getBoundingClientRect().height > document.documentElement.clientHeight) {\n          window.scrollTo(0, 0);\n          my_canvas.style.height = (text_container.getBoundingClientRect().height + 140) + \"px\";\n          window.resize_paper(document.documentElement.clientWidth, (text_container.getBoundingClientRect().height + 140));\n        }\n        \n        break;\n      case \"edit\":\n\n        window.clear_canvas();\n        text_area.innerHTML = \"\";\n        text_area.setAttribute(\"data-text\", \"Enter text here. Then press the button above to draw and annotate!\");\n        text_container.style.height = \"\";\n        text_container.style.width = \"86%\";\n        text_area.style.borderBottom = \"1px dotted white\";\n        my_canvas.style.borderBottom = \"\";\n        my_canvas.style.height = 'calc(100% - 140px)';\n        my_canvas.style.width = \"100%\";\n        my_canvas.style.pointerEvents = \"none\";\n        text_container.style.pointerEvents = \"auto\";\n        break;\n      default:\n        break;\n    }\n \n  }, [mode]); \n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (window.paperscript_ready){\n        set_mode(\"init\");\n        clearInterval(interval);\n      }\n    }, 1000);\n    }, []);\n  \n  return (\n    <div className=\"App\">\n      <div className=\"loading_screen\" id=\"loading_screen\">\n        <p>Loading Quick Annotate....</p>\n      </div>\n      <div className=\"toolbar\">\n      {mode === \"edit\" ?\n             <div className=\"center_nav\">\n                  <svg onClick={() => set_mode(\"draw\")} width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-file-play\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M4 0h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H4z\"/>\n                    <path d=\"M6 10.117V5.883a.5.5 0 0 1 .757-.429l3.528 2.117a.5.5 0 0 1 0 .858l-3.528 2.117a.5.5 0 0 1-.757-.43z\"/>\n                  </svg>\n\n\n              </div> \n                 :\n                     <div className=\"center_nav\">\n                       <svg onClick={() => set_mode(\"edit\")} width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-pencil\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path fillRule=\"evenodd\" d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5L13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175l-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\n                       </svg>\n\n                         </div> \n                         }\n\n      \n\n\n      </div>\n\n      <div className=\"text_container\" id=\"text_container\">\n  <div className=\"text_area\" id=\"text_area\" lang=\"en\" contentEditable=\"true\" data-text=\"\" spellCheck=\"false\"></div>\n</div>\n<canvas id=\"myCanvas\" resize=\"true\"></canvas>\n\n      \n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}